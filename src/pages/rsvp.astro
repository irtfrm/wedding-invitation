---
import Base from "../layouts/Base.astro";
---
<Base title="Tomoya & Rina Wedding Invitation">
<section class="pt-20 px-8 flex gap-10 flex-col items-center overflow-hidden">
  <h2 class="text-4xl sm:text-5xl font-script ">Presence or Absence</h2>
    <div class="text-center text-base/8 bg-cream-100 p-5">
        お手数ですが 下記お日にち迄に<br>
        出欠のご連絡をお願い申し上げます。
        <div class="py-3 text-lg text-rose-700">2025年11月15日 [土]</div>
        期⽇までのご連絡が難しい場合には<br>
        ご一報いただけますと幸いです。
    </div>
    
    <form id="rsvpForm" method="POST" novalidate class="grid gap-4 w-full">

      <div class="text-sm text-rose-700">* は入力必須</div>
      <div>
        <label for="name" class="block text-sm mb-1">お名前 *</label>
        <input id="name" name="name" type="text" required minlength="2" maxlength="40" autocomplete="name" class="w-full rounded-xl border p-3" />
        <p class="err text-rose-700 text-sm mt-1" data-for="name"></p>
      </div>
    
      <div>
        <label for="email" class="block text-sm mb-1">メール *</label>
        <input id="email" name="email" type="email" required inputmode="email" autocomplete="email" class="w-full rounded-xl border p-3" />
        <p class="err text-rose-700 text-sm mt-1" data-for="email"></p>
      </div>
      <div>
        <label for="tel" class="block text-sm mb-1">電話番号 *</label>
        <input id="tel" name="tel" type="tel" required inputmode="tel" autocomplete="tel" class="w-full rounded-xl border p-3" />
        <p class="err text-rose-700 text-sm mt-1" data-for="tel"></p>
      </div>
    
      <fieldset class="space-y-2">
        <legend class="block text-sm">ご出欠 *</legend>
        <label class="inline-flex items-center gap-2 mr-3"><input type="radio" name="rsvp" value="出席" class="rounded-full" required>出席</label>
        <label class="inline-flex items-center gap-2"><input type="radio" name="rsvp" value="欠席" class="rounded-full" required>欠席</label>
        <p class="err text-rose-700 text-sm mt-1" data-for="rsvp"></p>
      </fieldset>
    
      <div>
        <label for="allergy" class="block text-sm mb-1">アレルギー/食事制限</label>
        <textarea id="allergy" name="allergy" class="w-full rounded-xl border p-3"></textarea>
      </div>
    
      <div>
        <label for="message" class="block text-sm mb-1">新郎新婦へのメッセージ</label>
        <textarea id="message" name="message" class="w-full rounded-xl border p-3"></textarea>
      </div>
    
      <div class="hp" aria-hidden="true">
        <label for="hp">Do not fill</label>
        <input id="hp" name="hp_field" type="text" tabindex="-1" autocomplete="off" />
      </div>
    
      <button id="submitBtn" type="submit" class="cursor-pointer inline-flex justify-center items-center transition rounded-xl text-lg bg-black text-white py-3 px-6 bg-rose-400 hover:bg-rose-500">
        <svg class="mr-3 -ml-1 size-5 animate-spin text-white hidden " xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
        <div>送信する</div>
      </button>
      
      <div id="notice" role="status" aria-live="polite" class="text-sm"></div>
    </form>
    <a href="/" class=" text-zinc-500 underline text-sm "> « 招待状に戻る</a>
</section>
</Base>

<style>
  .hp{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}
  .is-invalid{outline:2px solid #d62338}
  .is-disabled{opacity:.6;pointer-events:none}
</style>

<script>
  (() => {
  const FORM    = document.getElementById('rsvpForm');
  const BTN     = document.getElementById('submitBtn');
  const NOTICE  = document.getElementById('notice');
  const START_AT = Date.now();
  const MIN_MS   = 100;       // 最低経過時間
  const TIMEOUT_MS = 12000;   // 12秒タイムアウト
  const GAS_URL = 'https://script.google.com/macros/s/AKfycbw652D3BLkgpadqMgd0TLGiU5QP_sKe3q0-L0mtnYxPODPaNTFWEhAODN6D6cM5biTW/exec';

  // ★ 追加: 子要素を固定で取っておく（消さない運用にする）
  const SPINNER = BTN.querySelector('svg');
  const LABEL   = BTN.querySelector('div');

  let submitted = false;

  const setError = (el, msg) => {
    const id = el.getAttribute('id') || el.getAttribute('name');
    const p = FORM.querySelector(`.err[data-for="${id}"]`) || FORM.querySelector(`.err[data-for="${el.name}"]`);
    if (p) p.textContent = msg || '';
    el.classList[msg ? 'add' : 'remove']('is-invalid');
  };

  const validate = () => {
    let ok = true;
    [...FORM.elements].forEach(el => {
      if (!(el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el instanceof HTMLSelectElement)) return;
      if (['hidden', 'submit', 'button'].includes(el.type)) return;
      setError(el, '');
      if (!el.checkValidity()) {
        ok = false;
        setError(el, el.validationMessage);
      }
    });

    const hp = FORM.querySelector('#hp');
    if (hp && hp.value) { ok = false; }

    if (Date.now() - START_AT < MIN_MS) {
      ok = false;
      NOTICE.textContent = 'もう一度お試しください…';
    }
    return ok;
  };

  const fetchWithTimeout = (url, options, timeoutMs) => {
    return new Promise((resolve, reject) => {
      const id = setTimeout(() => reject(new Error('timeout')), timeoutMs);
      fetch(url, options).then(
        (res) => { clearTimeout(id); resolve(res); },
        (err) => { clearTimeout(id); reject(err); }
      );
    });
  };

  FORM.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (submitted) return;
    NOTICE.textContent = '';

    if (!validate()) {
      const first = FORM.querySelector('.is-invalid');
      if (first) first.scrollIntoView({ behavior: 'smooth', block: 'center' });
      return;
    }

    submitted = true;
    BTN.classList.add('is-disabled');
    // ★ 修正: 子要素を消さずにスピナー表示＋ラベル文言だけ変更
    SPINNER?.classList.remove('hidden');
    BTN.setAttribute('aria-busy', 'true');
    LABEL && (LABEL.textContent = '送信中…');

    const finish = (success) => {
      BTN.removeAttribute('aria-busy');
      LABEL && (LABEL.textContent = success ? '送信しました' : '再送信する');
      // ★ スピナーを隠す（要素自体は残す）
      SPINNER?.classList.add('hidden');

      const rsvpValue = FORM.querySelector('input[name="rsvp"]:checked')?.value;
      
      if (rsvpValue === '出席') {
        NOTICE.innerText = 'ご出席のご連絡ありがとうございます！\n当日お会いできることを楽しみにしております。';
      } else if (rsvpValue === '欠席') {
        NOTICE.innerText = 'ご連絡ありがとうございます！\nまた別の機会にお目にかかれることを楽しみにしております。';
      } else {
        NOTICE.textContent = 'ご回答ありがとうございます！';
      }
      if (!success) {
        NOTICE.textContent = '送信に失敗しました。時間をおいて再度お試しください。';
        BTN.classList.remove('is-disabled');
        FORM.reset();
      }
      submitted = false;
    };

    try {
      const fd = new FormData(FORM);
      const elapsed = Math.floor((Date.now() - START_AT) / 1000);
      fd.append('elapsedSeconds', String(elapsed));

      const params = new URLSearchParams();
      for (const [k, v] of fd.entries()) params.append(k, v);

      const res = await fetchWithTimeout(GAS_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' },
        body: params.toString(),
      }, TIMEOUT_MS);

      let okJson = false;
      if (res && res.ok) {
        const json = await res.json().catch(() => ({}));
        okJson = !!json.ok;
      }
      finish(okJson);
    } catch (err) {
      finish(false);
    }
  });
})();
</script>
  
